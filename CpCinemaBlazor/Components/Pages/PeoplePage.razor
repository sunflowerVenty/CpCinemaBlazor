@page "/people"
@using CpCinemaBlazor.ApiRequest
@using CpCinemaBlazor.ApiRequest.Model
@using Microsoft.AspNetCore.Authorization
@using static CpCinemaBlazor.ApiRequest.Model.User
@rendermode InteractiveServer
@inject NavigationManager Navigation

<style>
    /* Основные настройки */
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    /* Центрирование контента */
    .centered-content {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    /* Формы */
    .form-control {
        width: 100%;
        padding: 0.5rem;
        margin: 0.5rem 0;
        border: 1px solid #ced4da;
        border-radius: 0.75rem;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.2rem rgba(12, 105, 227, 0.25);
        }

    /* Кнопки */
    .btn {
        padding: 0.5rem 1.5rem;
        border: none;
        border-radius: 0.75rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

    .btn-primary {
        background-color: #0d6efd;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #bd2130;
        }

    /* Таблицы */
    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }

        .table thead th {
            background-color: #343a40;
            color: white;
            padding: 0.75rem;
            border-radius: 0.5rem 0.5rem 0 0;
        }

        .table td, .table th {
            border: 1px solid #dee2e6;
            padding: 0.75rem;
            text-align: center; /* Центрирование текста */
        }

    /* Заголовки */
    h1 {
        color: #212529;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        border-radius: 0.5rem;
        padding: 1rem;
        background-color: #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Валидация */
    .text-danger {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    /* Аватарки */
    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #007bff;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        margin-right: 10px;
    }

    /* Эффекты наведения */
    .form-control:hover {
        border-color: #adb5bd;
    }

    .form-control:disabled {
        background-color: #e9ecef;
        border-color: #ced4da;
    }
</style>

<PageTitle>People page</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-md-8">
        <div class="table-responsive">
            <table class="table">
                <thead class="alert-dark">
                    <tr>
                        <th>Аватар</th>
                        <th>ID</th>
                        <th>Имя</th>
                        <th>О себе</th>
                        <th>Email</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users == null)
                    {
                        <tr>
                            <td colspan="6" class="text-center">Загрузка...</td>
                        </tr>
                    }
                    else if (!users.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">Нет пользователей</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <div class="avatar">@user.Name[0]</div>
                                </td>
                                <td>@user.id_User</td>
                                <td>
                                    @if (user.Edit)
                                    {
                                        <input @bind="@user.Name" class="form-control" placeholder="Имя" pattern="[а-яА-Я]+" />
                                    }
                                    else
                                    {
                                        @user.Name
                                    }
                                </td>
                                <td>
                                    @if (user.Edit)
                                    {
                                        <input @bind="@user.AboutMe" class="form-control" placeholder="О себе" />
                                    }
                                    else
                                    {
                                        @user.AboutMe
                                    }
                                </td>
                                <td>
                                    @if (user.Edit)
                                    {
                                        <input @bind="@user.Email" class="form-control" placeholder="Почта" />
                                    }
                                    else
                                    {
                                        @user.Email
                                    }
                                </td>
                                <td>
                                    <button @onclick="() => Chat(user)" class="btn btn-info">Перейти в чат</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<UserDataShort> users;

    AddUser addUser = new AddUser();
    UserDataShort UserData = new UserDataShort();
    CurUser curUser;

    private bool isAuthenticated;
    private bool isAdmin;

    [Inject] private ApiRequestService ApiRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        curUser = SingletoneUser.GetUser();

        isAuthenticated = curUser != null;

        isAdmin = curUser?.isAdmin == true;

        if (isAuthenticated)
        {
            await GetUsers();
        }
    }

    private async Task GetUsers()
    {
        var userData = await ApiRequest.GetUsersAsync();
        users = userData ?? new List<UserDataShort>();

        StateHasChanged();
    }

    async Task Chat(UserDataShort user)
    {
        // Создаем объект ChatDto
        var chatDto = new ChatDto
            {
                UserId = user.id_User,
                UserName = user.Name,
                LastMessage = "", // Здесь можно добавить логику для получения последнего сообщения, если нужно
                LastMessageTime = DateTime.Now // Здесь можно добавить логику для получения времени последнего сообщения, если нужно
            };

        // Передаем данные о собеседнике
        Navigation.NavigateTo($"/chat/{chatDto.UserId}");
    }

    public class ChatDto
    {
        public int UserId { get; set; } // Идентификатор собеседника
        public string UserName { get; set; } // Имя собеседника
        public string LastMessage { get; set; } // Последнее сообщение
        public DateTime LastMessageTime { get; set; } // Время последнего сообщения
    }
}