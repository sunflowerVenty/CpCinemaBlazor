@page "/discuss/{filmId:int}"
@using CpCinemaBlazor.ApiRequest.Model
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Обсуждение фильма</PageTitle>

<h3>Обсуждение фильма: @filmName</h3>

@if (messages == null)
{
    <p>Загрузка сообщений...</p>
}
else if (!messages.Any())
{
    <p>Нет сообщений для этого фильма.</p>
}
else
{
    <div class="list-group">
        @foreach (var message in messages)
        {
            <div class="list-group-item">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@message</h5>
                    <small>@message.dateTimeSent.ToString("g")</small>
                </div>
                <p class="mb-1">@message.Message</p>
                @if (!string.IsNullOrEmpty(message.ImageURL))
                {
                    <img src="@message.ImageURL" alt="Изображение" class="img-thumbnail" style="max-width: 200px;" />
                }
            </div>
        }
    </div>
}

<h4>Добавить сообщение</h4>
<div class="form-group">
    <label for="message">Сообщение:</label>
    <textarea @bind="newMessage.Message" class="form-control" id="message" rows="3"></textarea>
</div>
<div class="form-group">
    <label for="image-url">URL изображения (опционально):</label>
    <input @bind="newMessage.ImageURL" class="form-control" id="image-url" />
</div>
<button @onclick="AddMessage" class="btn btn-primary mt-3">Отправить</button>

@code {
    [Parameter]
    public int filmId { get; set; }

    private string filmName;
    private List<MessageShort> messages;
    private AddMessage newMessage = new AddMessage();

    protected override async Task OnInitializedAsync()
    {
        if (filmId <= 0)
        {
            Console.WriteLine("Некорректный filmId");
            NavigationManager.NavigateTo("/error");
            return;
        }
        try
        {
            var filmResponse = await Http.GetFromJsonAsync<Film>($"api/FilmGenres/getFilm/{filmId}");
            if (filmResponse == null)
            {
                Console.WriteLine("Фильм не найден");
                NavigationManager.NavigateTo("/error");
                return;
            }

            filmName = filmResponse.Name;

            var messagesResponse = await Http.GetFromJsonAsync<MessageDataContainer>($"/api/messages?filmId={filmId}");
            if (messagesResponse == null || messagesResponse.messages == null)
            {
                messages = new List<MessageShort>();
            }
            else
            {
                messages = messagesResponse.messages;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Console.WriteLine($"Ресурс не найден: {ex.Message}");
            NavigationManager.NavigateTo("/error"); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла ошибка: {ex.Message}");
            NavigationManager.NavigateTo("/error"); 
        }
    }

    private async Task AddMessage()
    {
        newMessage.Film_ = filmId;
        newMessage.User_Name = GetCurrentUserId();
        newMessage.Recipient_Name = 0; 

        await Http.PostAsJsonAsync("/api/messages", newMessage);
        messages.Add(new MessageShort
            {
                Id_Message = messages.Count + 1,
                Message = newMessage.Message,
                dateTimeSent = DateTime.Now,

                ImageURL = newMessage.ImageURL
            });

        newMessage = new AddMessage(); 
    }

    private int GetCurrentUserId()
    {
        return 1; //нужно допилить
                  //нужно допилить
                  //нужно допилить
                  //нужно допилить
    }
}