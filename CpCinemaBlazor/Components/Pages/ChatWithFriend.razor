@page "/chats/{ReceiverId:int}"
@using static CpCinemaBlazor.Components.Pages.PeoplePage
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using CpCinemaBlazor.ApiRequest.Services
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject MessagesService MessagesService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory HttpClientFactory

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 90vh;
        max-width: 800px;
        margin: 20px auto;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        background: white;
        overflow: hidden;
        font-family: 'Segoe UI', sans-serif;
    }

    .chat-title {
        background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
        color: white;
        padding: 15px;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 500;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #f5f7fa;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .message {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 18px;
        position: relative;
        animation: fadeIn 0.3s ease-out;
        word-wrap: break-word;
        line-height: 1.4;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .user-message {
        align-self: flex-end;
        background: linear-gradient(135deg, #007acc 0%, #00a1ff 100%);
        color: white;
        border-bottom-right-radius: 4px;
    }

    .sender-message {
        align-self: flex-start;
        background: white;
        color: #333;
        border-bottom-left-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .message-content {
        position: relative;
    }

    .timestamp {
        display: block;
        font-size: 0.7rem;
        opacity: 0.8;
        margin-top: 4px;
        text-align: right;
    }

    .user-message .timestamp {
        color: rgba(255, 255, 255, 0.7);
    }

    .sender-message .timestamp {
        color: rgba(0, 0, 0, 0.5);
    }

    .input-container {
        display: flex;
        padding: 15px;
        background: white;
        border-top: 1px solid #e0e5ec;
        gap: 10px;
        align-items: center;
    }

    input[type="text"] {
        flex: 1;
        padding: 12px 15px;
        border: 1px solid #e0e5ec;
        border-radius: 24px;
        font-size: 1rem;
        outline: none;
        transition: border 0.3s;
    }

        input[type="text"]:focus {
            border-color: #007acc;
            box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
        }

    button {
        padding: 12px 20px;
        background: linear-gradient(135deg, #007acc 0%, #005c99 100%);
        color: white;
        border: none;
        border-radius: 24px;
        cursor: pointer;
        font-weight: 500;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 92, 153, 0.2);
        }

        button:active {
            transform: translateY(0);
        }

    .file-input-container {
        position: relative;
    }

    .file-input-label {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #f0f4f8;
        cursor: pointer;
        transition: background 0.2s;
    }

        .file-input-label:hover {
            background: #e0e5ec;
        }

        .file-input-label svg {
            width: 20px;
            height: 20px;
            fill: #007acc;
        }

    .image-preview {
        max-width: 200px;
        max-height: 200px;
        border-radius: 8px;
        margin-top: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

        .image-preview:hover {
            transform: scale(1.03);
        }

    /* Стили для скроллбара */
    .messages::-webkit-scrollbar {
        width: 6px;
    }

    .messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

        .messages::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
</style>

<div class="chat-container">
    <h2 class="chat-title">Чат с @(messages.FirstOrDefault()?.ReceiverName ?? "пользователем")</h2>
    <div class="messages">
        @foreach (var message in messages)
        {
            <div class="message @(message.SenderId == userId ? "user-message" : "sender-message")">
                <div class="message-content">
                    @if (!string.IsNullOrEmpty(message.ImageUrl))
                    {
                        <img src="@message.ImageUrl" class="image-preview" alt="Изображение" />
                    }
                    <p>@message.Message</p>
                    <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span>
                </div>
            </div>
        }
    </div>
    <div class="input-container">
        <div class="file-input-container">
            <label class="file-input-label" for="file-upload">
                <svg viewBox="0 0 24 24">
                    <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                </svg>
            </label>
            <InputFile id="file-upload" @ref="fileInput" OnChange="HandleFileSelected" accept="image/*" style="display: none;" />
        </div>
        <input type="text" @bind="newMessageContent"
               placeholder="Напишите сообщение..."
               @onkeydown="@(e => { if (e.Key == "Enter") SendMessage(); })" />
        <button @onclick="SendMessage">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="white" style="margin-right: 5px;">
                <path d="M2,21L23,12L2,3V10L17,12L2,14V21Z" />
            </svg>
            Отправить
        </button>
    </div>
</div>
@code {
    [Parameter]
    public int ReceiverId { get; set; }

    private string newMessageContent = "";

    private List<MessagesDto> messages = new List<MessagesDto>();
    private int userId;
    private HubConnection? hubConnection;
    private readonly IHttpClientFactory _httpClientFactory;
    private const string BaseUrl = "api/Message";
    private InputFile fileInput;
    private IBrowserFile selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5005/chatHub").Build();

        hubConnection.On<string, int, int, string>("ReceiveMessage", (message, senderId, receiverId, imageUrl) =>
        {
            if (receiverId != userId && receiverId != ReceiverId || senderId == userId) return;
            Console.WriteLine($"Message from {senderId}: {message}");
            messages.Add(new MessagesDto
                {
                    SenderId = senderId,
                    ReceiverId = receiverId,
                    Message = message,
                    Timestamp = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time")),

                    ImageUrl = imageUrl
                });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        //await hubConnection.SendAsync("RegisterUser", userId);
        Console.WriteLine("Good b " + hubConnection.ConnectionId);
    }

    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessageContent) && selectedFile is null) return;

        string imageUrl = null;

        if (selectedFile != null)
        {
            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            var content = new MultipartFormDataContent();
            var fileStream = selectedFile.OpenReadStream();
            var fileContent = new StreamContent(fileStream);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await httpClient.PostAsync("api/messages/uploadImage", content);
            if (response.IsSuccessStatusCode)
            {
                // Читаем ответ как типизированный объект
                var result = await response.Content.ReadFromJsonAsync<UploadResponse>();
                imageUrl = result?.imageUrl;
            }
        }

        var newMessage = new MessagesDto
            {
                SenderId = userId,
                ReceiverId = ReceiverId,
                Message = newMessageContent,
                Timestamp = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time")),
                ImageUrl = imageUrl
            };

        await hubConnection.SendAsync("SendMessageToUser", newMessageContent, userId, ReceiverId, imageUrl);

        messages.Add(newMessage);
        newMessageContent = string.Empty;
        selectedFile = null; // Очищаем выбранный файл
        StateHasChanged();
    }

    private async Task<string> RefreshTokenAsync()
    {
        var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");
        var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
        var response = await httpClient.PostAsJsonAsync("api/Auth/RefreshToken", new { RefreshToken = refreshToken });

        if (response.IsSuccessStatusCode)
        {
            var newToken = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("authToken", newToken);
            return newToken;
        }
        else
        {
            Console.WriteLine("Ошибка при обновлении токена.");
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("refreshToken");
            Navigation.NavigateTo("/login");
            return null;
        }
    }

    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var expirationDate = jwtToken.ValidTo;
            return expirationDate > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token) || !IsTokenValid(token))
            {
                Console.WriteLine("Токен отсутствует или истек. Попытка обновления...");
                token = await RefreshTokenAsync();

                if (string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("Не удалось обновить токен. Перенаправление на страницу входа.");
                    Navigation.NavigateTo("/login");
                    return;
                }
            }
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            userId = int.Parse(jwtToken.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            messages = await MessagesService.getMessagesWithUserAsync(userId, ReceiverId);
            StateHasChanged();
        }
    }

    public class MessagesDto
    {
        public int SenderId { get; set; }
        public string SenderName { get; set; }
        public int ReceiverId { get; set; }
        public string ReceiverName { get; set; }

        public string Message { get; set; }

        public DateTime Timestamp { get; set; } = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time"));
        public string ImageUrl { get; set; }
    }

    public class UploadResponse
    {
        public string imageUrl { get; set; }
    }
}