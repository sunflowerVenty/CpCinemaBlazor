@page "/"

@using System.ComponentModel.DataAnnotations
@using CpCinemaBlazor.ApiRequest.Model
@using Microsoft.AspNetCore.Authentication
@using CpCinemaBlazor.Data
@using CpCinemaBlazor.ApiRequest
@using ApiRequest.Services
@using System
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using static CpCinemaBlazor.ApiRequest.Model.User

@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<style>
    /* Основные настройки */
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
}

/* Центрирование контента */
.centered-content {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

/* Формы */
.form-control {
    width: 100%;
    padding: 0.5rem;
    margin: 0.5rem 0;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
}

.form-group {
    margin-bottom: 1rem;
}

/* Кнопки */
.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: #0d6efd;
    color: white;
}

.btn-primary:hover {
    background-color: #0b5ed7;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-danger:hover {
    background-color: #bd2130;
}

/* Таблицы */
.table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
}

.table thead th {
    background-color: #343a40;
    color: white;
    padding: 0.75rem;
}

.table td, .table th {
    border: 1px solid #dee2e6;
    padding: 0.75rem;
}

/* Заголовки */
h1 {
    color: #212529;
    font-weight: bold;
    text-align: center;
    margin-bottom: 2rem;
}

/* Валидация */
.text-danger {
    color: #dc3545;
    font-size: 0.875em;
    margin-top: 0.25rem;
}
</style>
<PageTitle>Log in</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-md-4">
        <section>
            <EditForm Model="@Input" OnValidSubmit="AuthBtn" FormName="LoginForm">
                <DataAnnotationsValidator />
                <h2 class="text-center mb-4">Авторизация</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label for="email" class="form-label">Почта</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div class="mt-3">
                    <p class="text-center">
                        <a href="/Account/Registration">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    AuthUser user = new AuthUser();
    [Inject] private ApiRequestService ApiRequest { get; set; }

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }



    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    async Task AuthBtn()
    {
        try
        {
            user.Email = Input.Email;
            user.Password = Input.Password;

            var token = await ApiRequest.AuthorizationAsync(user);

            if (!string.IsNullOrEmpty(token))
            {
                var principal = JwtService.DecodeJwtToken(token);

                int Id = Convert.ToInt32(principal.FindFirst("id_User")?.Value);
                string NameT = principal.FindFirst("Name")?.Value;
                string About = principal.FindFirst("AboutMe")?.Value;
                bool Admin = Convert.ToBoolean(principal.FindFirst("isAdmin")?.Value);
                SingletoneUser.InitUser(new CurUser { id_User = Id, AboutMe = About, Name = NameT, isAdmin = Admin, Token = token });
                
                if (Admin == true)
                {
                    Navigation.NavigateTo("/adminpage");
                }
                else if (Admin == false)
                {
                    Navigation.NavigateTo("/userpage");
                }
            }
            else
            {
                errorMessage = "Authorization failed: No token received";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Authorization failed: {ex.Message}";
        }
    }

    public class JwtService
    {
        public static ClaimsPrincipal DecodeJwtToken(string token)
        {
            var handler = new JwtSecurityTokenHandler();

            // Проверяем, является ли токен валидным JWT
            if (handler.CanReadToken(token))
            {
                // Декодируем токен
                var jwtToken = handler.ReadJwtToken(token);

                // Извлекаем claims (данные) из токена
                var claims = jwtToken.Claims;

                // Создаем ClaimsPrincipal для работы с данными
                var identity = new ClaimsIdentity(claims, "jwt");
                var principal = new ClaimsPrincipal(identity);

                return principal;
            }

            throw new Exception("Invalid JWT token");
        }
    }
}
