@page "/filmpage"
@using CpCinemaBlazor.ApiRequest
@using CpCinemaBlazor.ApiRequest.Model
@using CpCinemaBlazor.ApiRequest.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject FilmService MovieService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDispatcher Dispatcher
@inject IState<AuthState> _authState
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime

<style>
    /* Основные стили */
    .movies-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Шапка */
    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

        .header-container h3 {
            font-size: 1.8rem;
            color: #2c3e50;
            margin: 0;
            font-weight: 600;
        }

    /* Навигационные кнопки */
    .nav-buttons {
        display: flex;
        gap: 0.8rem;
        flex-wrap: wrap;
    }

    .nav-btn, .logout-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.95rem;
        border: none;
        cursor: pointer;
    }

    .nav-btn {
        background-color: #3498db;
        color: white;
    }

        .nav-btn:hover {
            background-color: #2980b9;
            transform: translateY(-1px);
        }

    .logout-btn {
        background-color: #e74c3c;
        color: white;
    }

        .logout-btn:hover {
            background-color: #c0392b;
            transform: translateY(-1px);
        }

    /* Форма добавления фильма */
    .add-movie-form {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2c3e50;
        }

    .form-control {
        width: 100%;
        padding: 0.7rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
        transition: border 0.2s;
    }

        .form-control:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }

    .submit-btn {
        background-color: #2ecc71;
        color: white;
        padding: 0.7rem 1.4rem;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

        .submit-btn:hover {
            background-color: #27ae60;
            transform: translateY(-1px);
        }

    /* Таблица фильмов */
    .movies-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .movies-table th {
            background-color: #3498db;
            color: white;
            padding: 1rem;
            text-align: left;
            font-weight: 500;
        }

        .movies-table td {
            padding: 1rem;
            border-bottom: 1px solid #eee;
            vertical-align: middle;
        }

        .movies-table tr:last-child td {
            border-bottom: none;
        }

        .movies-table tr:hover {
            background-color: #f8f9fa;
        }

    /* Кнопки действий */
    .action-btn {
        padding: 0.5rem 0.8rem;
        border-radius: 5px;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.2s;
        border: none;
        cursor: pointer;
        margin-right: 0.5rem;
        display: inline-flex;
        align-items: center;
        gap: 0.3rem;
    }

    .view-btn {
        background-color: #3498db;
        color: white;
    }

        .view-btn:hover {
            background-color: #2980b9;
        }

    .discuss-btn {
        background-color: #9b59b6;
        color: white;
    }

        .discuss-btn:hover {
            background-color: #8e44ad;
        }

    .edit-btn {
        background-color: #f39c12;
        color: white;
    }

        .edit-btn:hover {
            background-color: #d35400;
        }

    .delete-btn {
        background-color: #e74c3c;
        color: white;
    }

        .delete-btn:hover {
            background-color: #c0392b;
        }

    /* Сообщения */
    .loading-text, .no-data-text {
        text-align: center;
        padding: 2rem;
        color: #7f8c8d;
        font-size: 1.1rem;
    }

</style>

<div class="movies-container">
    <div class="header-container">
        <h3>Управление фильмами</h3>
    </div>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="add-movie-form">
                <h4>Добавить новый фильм</h4>
                <div class="form-group">
                    <label>Название фильма</label>
                    <input class="form-control" @bind="newMovie.Name" />
                </div>
                <div class="form-group">
                    <label>Жанр</label>
                    <input class="form-control" @bind="newMovie.Genre" />
                </div>
                <div class="form-group">
                    <label>Рейтинг</label>
                    <input class="form-control" type="number" @bind="newMovie.Rating" />
                </div>
                <div class="form-group">
                    <label>Дата выхода</label>
                    <input class="form-control" type="date" @bind="newMovie.ReleaseDate" />
                </div>
                <div class="form-group">
                    <label>Описание</label>
                    <input class="form-control" @bind="newMovie.Description"></input>
                </div>
                <button class="submit-btn" @onclick="AddMovie">Добавить фильм</button>
            </div>
        </Authorized>
    </AuthorizeView>

    <!-- Таблица фильмов -->
    @if (!isAuthenticated)
    {
        <p class="loading-text">Загрузка...</p>
    }
    else if (movies == null || !movies.Any())
    {
        <p class="no-data-text">Нет данных о фильмах.</p>
    }
    else
    {
        <table class="movies-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Название</th>
                    <th>Жанр</th>
                    <th>Рейтинг</th>
                    <th>Дата выхода</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var movie in movies)
                {
                    <tr>
                        <td>@movie.Id</td>
                        <td>@movie.Name</td>
                        <td>@movie.Genre</td>
                        <td>@movie.Rating</td>
                        <td>@movie.ReleaseDate.ToShortDateString()</td>
                        <td>
                            <button class="action-btn discuss-btn" @onclick="() => DiscussMovie(movie.Id)">
                                <i class="fas fa-comments"></i> Обсудить
                            </button>
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <button class="action-btn edit-btn" @onclick="() => EditMovie(movie.Id)">
                                        <i class="fas fa-edit"></i> Редакт.
                                    </button>
                                    <button class="action-btn delete-btn" @onclick="() => DeleteMovie(movie.Id)">
                                        <i class="fas fa-trash"></i> Удалить
                                    </button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<Film> movies = new List<Film>();
    private bool isLoading = true;
    private bool isAdmin = false;
    private bool isAuthenticated = false;
    private Film newMovie = new Film();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthState();
            await LoadMovies();
            StateHasChanged();
        }
    }

    private async Task CheckAuthState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        isAdmin = authState.User.IsInRole("Администратор");
    }

    private async Task LoadMovies()
    {
        try
        {
            isLoading = true;
            movies = await MovieService.GetFilmsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Ошибка при загрузке фильмов: {ex.Message}");
            movies = new List<Film>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddMovie()
    {
        try
        {
            var result = await MovieService.CreateFilmAsync(newMovie);
            if (result)
            {
                NotificationService.ShowSuccess("Фильм успешно добавлен");
                newMovie = new Film();
                await LoadMovies();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Ошибка при добавлении фильма: {ex.Message}");
        }
    }

    private void DiscussMovie(int id)
    {
        Navigation.NavigateTo($"/discussion/{id}");
    }

    private void EditMovie(int id)
    {
        Navigation.NavigateTo($"/movies/edit/{id}");
    }

    private async Task DeleteMovie(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить этот фильм?");
        if (confirmed)
        {
            try
            {
                if (await MovieService.DeleteFilmAsync(id))
                {
                    NotificationService.ShowSuccess("Фильм успешно удален");
                    await LoadMovies();
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError($"Ошибка при удалении фильма: {ex.Message}");
            }
        }
    }

    private async Task Logout()
    {
        Dispatcher.Dispatch(new ClearJwtTokenAction());
        Navigation.NavigateTo("/login");
    }
}